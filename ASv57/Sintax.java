
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\033\004\000\002\033\002\000\002\004\005" +
    "\000\002\005\004\000\002\034\004\000\002\034\002\000" +
    "\002\006\005\000\002\007\005\000\002\035\005\000\002" +
    "\035\002\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\013\000" +
    "\002\013\012\000\002\014\004\000\002\036\004\000\002" +
    "\036\002\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\005\000\002\017\007\000" +
    "\002\017\013\000\002\020\005\000\002\037\005\000\002" +
    "\037\002\000\002\021\005\000\002\022\003\000\002\022" +
    "\003\000\002\023\007\000\002\024\004\000\002\024\005" +
    "\000\002\025\013\000\002\026\006\000\002\027\013\000" +
    "\002\031\014\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\021\004\001\002\000\004\105\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\005\010\001\002\000\004\061\012\001\002\000" +
    "\004\012\023\001\002\000\004\105\017\001\002\000\006" +
    "\012\ufffd\061\012\001\002\000\004\012\uffff\001\002\000" +
    "\006\012\ufffd\061\012\001\002\000\004\012\ufffe\001\002" +
    "\000\004\005\020\001\002\000\006\012\ufffc\061\ufffc\001" +
    "\002\000\004\022\177\001\002\000\004\012\023\001\002" +
    "\000\004\024\024\001\002\000\016\037\037\040\040\042" +
    "\044\043\042\044\045\045\041\001\002\000\004\005\ufff3" +
    "\001\002\000\004\005\ufff4\001\002\000\004\005\032\001" +
    "\002\000\004\013\031\001\002\000\004\012\ufff8\001\002" +
    "\000\006\013\ufff5\024\024\001\002\000\004\005\035\001" +
    "\002\000\004\013\ufff7\001\002\000\006\013\ufff5\024\024" +
    "\001\002\000\004\013\ufff6\001\002\000\006\014\ufff2\105" +
    "\ufff2\001\002\000\006\014\ufff1\105\ufff1\001\002\000\006" +
    "\014\uffed\105\uffed\001\002\000\006\014\uffef\105\uffef\001" +
    "\002\000\004\105\046\001\002\000\006\014\ufff0\105\ufff0" +
    "\001\002\000\006\014\uffee\105\uffee\001\002\000\004\010" +
    "\047\001\002\000\004\011\050\001\002\000\004\012\051" +
    "\001\002\000\030\032\061\037\037\040\040\042\044\043" +
    "\042\044\045\045\041\051\054\100\064\101\063\105\060" +
    "\001\002\000\034\013\uffe1\032\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\051\uffe1\074\uffe1\100\uffe1" +
    "\101\uffe1\105\uffe1\001\002\000\034\013\uffe8\032\061\037" +
    "\037\040\040\042\044\043\042\044\045\045\041\051\054" +
    "\074\uffe8\100\064\101\063\105\060\001\002\000\004\010" +
    "\163\001\002\000\034\013\uffe4\032\uffe4\037\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\051\uffe4\074\uffe4\100" +
    "\uffe4\101\uffe4\105\uffe4\001\002\000\034\013\uffe7\032\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\051" +
    "\uffe7\074\uffe7\100\uffe7\101\uffe7\105\uffe7\001\002\000\006" +
    "\013\157\074\156\001\002\000\004\017\153\001\002\000" +
    "\004\010\133\001\002\000\034\013\uffe2\032\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\051\uffe2\074" +
    "\uffe2\100\uffe2\101\uffe2\105\uffe2\001\002\000\004\012\130" +
    "\001\002\000\004\010\120\001\002\000\034\013\uffe3\032" +
    "\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\051\uffe3\074\uffe3\100\uffe3\101\uffe3\105\uffe3\001\002\000" +
    "\034\013\uffe6\032\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\051\uffe6\074\uffe6\100\uffe6\101\uffe6\105" +
    "\uffe6\001\002\000\006\014\072\105\071\001\002\000\034" +
    "\013\uffe5\032\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\051\uffe5\074\uffe5\100\uffe5\101\uffe5\105\uffe5" +
    "\001\002\000\004\004\113\001\002\000\004\015\073\001" +
    "\002\000\004\105\074\001\002\000\004\004\075\001\002" +
    "\000\004\012\076\001\002\000\004\016\101\001\002\000" +
    "\004\013\111\001\002\000\004\006\104\001\002\000\004" +
    "\105\102\001\002\000\004\016\103\001\002\000\004\006" +
    "\uffda\001\002\000\006\013\uffdb\016\101\001\002\000\004" +
    "\013\uffdd\001\002\000\004\006\107\001\002\000\006\013" +
    "\uffdb\016\101\001\002\000\004\013\uffdc\001\002\000\004" +
    "\005\112\001\002\000\034\013\uffde\032\uffde\037\uffde\040" +
    "\uffde\042\uffde\043\uffde\044\uffde\045\uffde\051\uffde\074\uffde" +
    "\100\uffde\101\uffde\105\uffde\001\002\000\006\105\114\106" +
    "\115\001\002\000\006\005\uffd9\011\uffd9\001\002\000\006" +
    "\005\uffd8\011\uffd8\001\002\000\004\005\117\001\002\000" +
    "\034\013\uffdf\032\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\051\uffdf\074\uffdf\100\uffdf\101\uffdf\105" +
    "\uffdf\001\002\000\004\105\121\001\002\000\004\065\122" +
    "\001\002\000\004\106\123\001\002\000\004\011\124\001" +
    "\002\000\004\012\125\001\002\000\030\032\061\037\037" +
    "\040\040\042\044\043\042\044\045\045\041\051\054\100" +
    "\064\101\063\105\060\001\002\000\004\013\127\001\002" +
    "\000\034\013\uffd4\032\uffd4\037\uffd4\040\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\051\uffd4\074\uffd4\100\uffd4\101\uffd4" +
    "\105\uffd4\001\002\000\030\032\061\037\037\040\040\042" +
    "\044\043\042\044\045\045\041\051\054\100\064\101\063" +
    "\105\060\001\002\000\004\013\132\001\002\000\034\013" +
    "\uffd3\032\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\045\uffd3\051\uffd3\074\uffd3\100\uffd3\101\uffd3\105\uffd3\001" +
    "\002\000\020\037\037\040\040\042\044\043\042\044\045" +
    "\045\041\105\134\001\002\000\004\065\145\001\002\000" +
    "\004\105\136\001\002\000\004\062\137\001\002\000\004" +
    "\105\140\001\002\000\004\011\141\001\002\000\004\012" +
    "\142\001\002\000\030\032\061\037\037\040\040\042\044" +
    "\043\042\044\045\045\041\051\054\100\064\101\063\105" +
    "\060\001\002\000\004\013\144\001\002\000\034\013\uffd1" +
    "\032\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\051\uffd1\074\uffd1\100\uffd1\101\uffd1\105\uffd1\001\002" +
    "\000\006\105\114\106\115\001\002\000\004\011\147\001" +
    "\002\000\004\012\150\001\002\000\030\032\061\037\037" +
    "\040\040\042\044\043\042\044\045\045\041\051\054\100" +
    "\064\101\063\105\060\001\002\000\004\013\152\001\002" +
    "\000\034\013\uffd2\032\uffd2\037\uffd2\040\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\051\uffd2\074\uffd2\100\uffd2\101\uffd2" +
    "\105\uffd2\001\002\000\004\005\154\001\002\000\034\013" +
    "\uffe0\032\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\051\uffe0\074\uffe0\100\uffe0\101\uffe0\105\uffe0\001" +
    "\002\000\004\013\162\001\002\000\006\105\114\106\115" +
    "\001\002\000\004\005\uffeb\001\002\000\004\005\161\001" +
    "\002\000\004\013\uffd0\001\002\000\004\005\uffec\001\002" +
    "\000\004\016\165\001\002\000\004\011\171\001\002\000" +
    "\006\016\167\105\166\001\002\000\004\016\170\001\002" +
    "\000\004\011\uffd6\001\002\000\004\011\uffd5\001\002\000" +
    "\004\005\172\001\002\000\034\013\uffd7\032\uffd7\037\uffd7" +
    "\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\051\uffd7\074" +
    "\uffd7\100\uffd7\101\uffd7\105\uffd7\001\002\000\034\013\uffe8" +
    "\032\061\037\037\040\040\042\044\043\042\044\045\045" +
    "\041\051\054\074\uffe8\100\064\101\063\105\060\001\002" +
    "\000\006\013\uffea\074\uffea\001\002\000\006\013\uffe9\074" +
    "\uffe9\001\002\000\004\022\ufffb\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\010\004\012\001\001\000\006\005\020\006\021\001" +
    "\001\000\002\001\001\000\006\004\014\033\013\001\001" +
    "\000\002\001\001\000\006\004\014\033\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\175\006\021\001\001\000\012\007" +
    "\027\010\026\012\025\013\024\001\001\000\004\011\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\032" +
    "\012\025\013\024\035\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\032\012\025\013\024\035\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\066\014\056" +
    "\015\052\016\051\017\055\023\065\025\067\026\054\027" +
    "\064\031\061\001\001\000\002\001\001\000\026\011\066" +
    "\015\172\016\051\017\055\023\065\025\067\026\054\027" +
    "\064\031\061\036\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\076\021\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\105\037\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\105\037" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\011\066\014\125\015\052" +
    "\016\051\017\055\023\065\025\067\026\054\027\064\031" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\066\014\130\015\052\016\051\017\055\023\065\025" +
    "\067\026\054\027\064\031\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\066\014" +
    "\142\015\052\016\051\017\055\023\065\025\067\026\054" +
    "\027\064\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\066\014\150\015\052\016\051\017" +
    "\055\023\065\025\067\026\054\027\064\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\066\015\172\016\051\017\055\023\065\025\067\026" +
    "\054\027\064\031\061\036\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO ID PUNTO_COMA LIBRERIAS BLOQUE_CODIGO FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIAS ::= LIBRERIA LIBRERIASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIASS ::= LIBRERIA LIBRERIASS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIASS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIASS",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= MODULARIDAD ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LIBRERIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQUE_CODIGO ::= BLOQUE BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQUESS ::= BLOQUE BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUESS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQUESS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUESS",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQUE ::= LLAVE_IZQ PROCEDIMIENTOS LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROCEDIMIENTOS ::= PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOSS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOS",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROCEDIMIENTOSS ::= PROCEDIMIENTO PUNTO_COMA PROCEDIMIENTOSS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOSS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROCEDIMIENTOSS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTOSS",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROCEDIMIENTO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROCEDIMIENTO ::= METODO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROCEDIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO_DATO ::= DATOS_BOOLEANOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO_DATO ::= DATOS_CARACTERES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO_DATO ::= DATOS_DECIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_DATO ::= DATOS_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_DATO ::= DATOS_NULOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= DATOS_TEXTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES RETORNAR LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= ACCESO TIPO_DATO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONESS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCIONESS ::= INSTRUCCION INSTRUCCIONESS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCIONESS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= REGLAIF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= REGLAELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCION ::= REGLAWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCION ::= REGLAFOREACH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCION ::= CONTADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTADOR ::= ID INC_DEC PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTADOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= TIPO_DATO ID IGUAL ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= TIPO_DATO CORCH_IZQ CORCH_DER ID IGUAL LLAVE_IZQ LISTA_ELEMENTOS LLAVE_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_ELEMENTOS ::= ELEMENTO COMA ELEMENTOSS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTOSS ::= ELEMENTO COMA ELEMENTOSS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOSS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTOSS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOSS",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ID_NUM ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ID_NUM ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID_NUM",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ESCRITURA ::= ENTRADA_Y_SALIDA PAR_IZQ TEXTO_ESCRITURA PAR_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TEXTO_ESCRITURA ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO_ESCRITURA ::= COMILLAS ID COMILLAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTO_ESCRITURA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REGLAIF ::= SI PAR_IZQ ID OPERADORES_RELACIONALES NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAIF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // REGLAELSE ::= SINO LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAELSE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // REGLAWHILE ::= CICLO PAR_IZQ ID OPERADORES_RELACIONALES ID_NUM PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAWHILE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REGLAFOREACH ::= CICLO PAR_IZQ TIPO_DATO ID OPERADOR ID PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REGLAFOREACH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RETORNAR ::= RETORNO ID_NUM PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
